#include "ros/ros.h"
#include "boost/units/systems/si.hpp"
#include "boost/units/io.hpp"
#include "geometry_msgs/Twist.h"
#include "Keyboard.hpp"


int main(int argc, char **argv) {
    ros::init(argc, argv, "path_planner");
    ros::NodeHandle nodeHandler;

    Keyboard keyboard(0);

    double speedXY = 0.3, speedR = 0.6, speedXYShift = 0.1, speedRShift = 0.2;

    ros::Publisher baseVelocitiesPublisher = nodeHandler.advertise<geometry_msgs::Twist>("cmd_vel", 1);

    ros::Rate rate(100);

    while(ros::ok() && !keyboard.keyPush(KEY_ESC))
    {
        geometry_msgs::Twist twist;

	if(keyboard.keyPush(KEY_1))
        {
            speedXY -=  speedXYShift;
            speedR -=  speedRShift;
	}

        if(keyboard.keyPush(KEY_2))
        {
            speedXY +=  speedXYShift;
            speedR +=  speedRShift;
	}

	if(speedXY < 0)speedXY = 0;
	if(speedR < 0)speedR = 0;

        if(keyboard.keyDown(KEY_UP))twist.linear.x +=  speedXY;
        if(keyboard.keyDown(KEY_DOWN))twist.linear.x += -speedXY;
        if(keyboard.keyDown(KEY_LEFT))twist.linear.y +=  speedXY;
        if(keyboard.keyDown(KEY_RIGHT))twist.linear.y += -speedXY;

        if(keyboard.keyDown(KEY_Q))twist.linear.z +=  speedXY;
        if(keyboard.keyDown(KEY_A))twist.linear.z += -speedXY;

        if(keyboard.keyDown(KEY_RIGHTCONTROL))twist.angular.z +=  speedR;
        if(keyboard.keyDown(KEY_RIGHTSHIFT))twist.angular.z += -speedR;

        baseVelocitiesPublisher.publish(twist);

        ros::spinOnce();
        rate.sleep();
    }

    ros::Duration(1).sleep();
    ros::shutdown();
    echoEnable(1);

    return 0;
}
